class Solution {
public:
    #define ll long long 
    const int MOD = 1e9 + 7 ;
    ll dp[41][1 << 10] ;
    int n ;
    unordered_map<int,vector<int>> mpp ;
    
    ll solve(int hat , int mask){
        int all = (1 << n) - 1; //mask for all persons visited
        
        if(mask == all) return 1 ;
        if(hat > 40) return 0 ;
        
        if(dp[hat][mask] != -1) return dp[hat][mask] ;
		
		//two options 
        ll op1 = solve(hat + 1 , mask) ; //skip this hat
        ll op2 = 0 ; //assign this hat to valid person
        
        for(auto &i : mpp[hat]){
            //check if ith person has already hat assigned 
            if(mask & (1 << i)) continue ;
            op2 += solve(hat + 1 , mask | (1 << i)) ;
            op2 %= MOD ;
        }
        
        return dp[hat][mask] = (op1 + op2) % MOD ;
    }
    
    int numberWays(vector<vector<int>>& hats) {
        n = hats.size() ;
        memset(dp,-1,sizeof(dp)) ;
        
        for(int i = 0 ; i < n ; ++i )
            for(auto &x : hats[i]) mpp[x].push_back(i);
        
        return solve(1,0) % MOD ;
    }
};